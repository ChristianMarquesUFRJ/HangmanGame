// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2021 22:04:29"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          hangman
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hangman_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] INPUT_LETTERS;
reg START;
// wires                                               
wire [6:0] DISPLAY_LETTER1;
wire [6:0] DISPLAY_LETTER2;
wire [6:0] DISPLAY_LETTER3;
wire [6:0] DISPLAY_LETTER4;
wire [6:0] DISPLAY_LETTER5;
wire [6:0] DISPLAY_LETTER6;
wire [6:0] DISPLAY_STATUS;
wire [2:0] LIFE_LEDS;

// assign statements (if any)                          
hangman i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DISPLAY_LETTER1(DISPLAY_LETTER1),
	.DISPLAY_LETTER2(DISPLAY_LETTER2),
	.DISPLAY_LETTER3(DISPLAY_LETTER3),
	.DISPLAY_LETTER4(DISPLAY_LETTER4),
	.DISPLAY_LETTER5(DISPLAY_LETTER5),
	.DISPLAY_LETTER6(DISPLAY_LETTER6),
	.DISPLAY_STATUS(DISPLAY_STATUS),
	.INPUT_LETTERS(INPUT_LETTERS),
	.LIFE_LEDS(LIFE_LEDS),
	.START(START)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// START
initial
begin
	START = 1'b1;
	START = #20000 1'b0;
	START = #380000 1'b1;
	START = #30000 1'b0;
end 
// INPUT_LETTERS[ 15 ]
initial
begin
	INPUT_LETTERS[15] = 1'b0;
	INPUT_LETTERS[15] = #20000 1'b1;
	INPUT_LETTERS[15] = #290000 1'b0;
end 
// INPUT_LETTERS[ 14 ]
initial
begin
	INPUT_LETTERS[14] = 1'b0;
end 
// INPUT_LETTERS[ 13 ]
initial
begin
	INPUT_LETTERS[13] = 1'b0;
	INPUT_LETTERS[13] = #250000 1'b1;
	INPUT_LETTERS[13] = #60000 1'b0;
end 
// INPUT_LETTERS[ 12 ]
initial
begin
	INPUT_LETTERS[12] = 1'b0;
	INPUT_LETTERS[12] = #190000 1'b1;
	INPUT_LETTERS[12] = #120000 1'b0;
end 
// INPUT_LETTERS[ 11 ]
initial
begin
	INPUT_LETTERS[11] = 1'b0;
end 
// INPUT_LETTERS[ 10 ]
initial
begin
	INPUT_LETTERS[10] = 1'b0;
	INPUT_LETTERS[10] = #70000 1'b1;
	INPUT_LETTERS[10] = #240000 1'b0;
end 
// INPUT_LETTERS[ 9 ]
initial
begin
	INPUT_LETTERS[9] = 1'b0;
end 
// INPUT_LETTERS[ 8 ]
initial
begin
	INPUT_LETTERS[8] = 1'b0;
end 
// INPUT_LETTERS[ 7 ]
initial
begin
	INPUT_LETTERS[7] = 1'b0;
end 
// INPUT_LETTERS[ 6 ]
initial
begin
	INPUT_LETTERS[6] = 1'b0;
end 
// INPUT_LETTERS[ 5 ]
initial
begin
	INPUT_LETTERS[5] = 1'b0;
end 
// INPUT_LETTERS[ 4 ]
initial
begin
	INPUT_LETTERS[4] = 1'b0;
end 
// INPUT_LETTERS[ 3 ]
initial
begin
	INPUT_LETTERS[3] = 1'b0;
	INPUT_LETTERS[3] = #550000 1'b1;
	INPUT_LETTERS[3] = #40000 1'b0;
end 
// INPUT_LETTERS[ 2 ]
initial
begin
	INPUT_LETTERS[2] = 1'b0;
	INPUT_LETTERS[2] = #510000 1'b1;
	INPUT_LETTERS[2] = #80000 1'b0;
end 
// INPUT_LETTERS[ 1 ]
initial
begin
	INPUT_LETTERS[1] = 1'b0;
	INPUT_LETTERS[1] = #470000 1'b1;
	INPUT_LETTERS[1] = #120000 1'b0;
end 
// INPUT_LETTERS[ 0 ]
initial
begin
	INPUT_LETTERS[0] = 1'b0;
	INPUT_LETTERS[0] = #120000 1'b1;
	INPUT_LETTERS[0] = #190000 1'b0;
	INPUT_LETTERS[0] = #120000 1'b1;
	INPUT_LETTERS[0] = #160000 1'b0;
end 
endmodule

